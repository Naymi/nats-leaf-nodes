version: '3'

tasks:
  satellite:
#    deps:
#      - nats:satellite
    cmds:
      - ts-node handlers/satellite/satellite.ts
  main:
#    deps:
#      - nats:main
    cmds:
      - ts-node handlers/main/main.ts
  satellite-cmd:
#    deps:
#      - nats:satellite
    cmds:
      - ts-node handlers/satellite/satellite-commands.ts
  main-cmd:
#    deps:
#      - nats:main
    cmds:
      - ts-node handlers/main/main-commands.ts
  leaf:
#    deps:
#      - nats:main
    cmds:
      - ts-node handlers/leaf/leaf.ts
  nats:main:
    run: once
    cmds:
      - docker compose --profile main up -d --wait
  nats-*:
    run: once
    cmds:
      - docker compose --profile * up  -d --wait
  nats:satellite:
    run: once
    cmds:
      - docker compose --profile satellite up -d --wait
  nats:all:
    run: once
    cmds:
      - docker compose --profile "*" up -d --wait
  nats:destroy:
    - docker compose --profile "*" down

  reply:
    cmds:
      - ts-node handlers/reply.ts

  request:
    cmds:
      - ts-node handlers/request.ts

  bench-reply:
    deps:
      - nats:all
    cmds:
      - nats bench foo --sub 1 --reply --server nats://localhost:4322

  bench-request:
    deps:
      - nats:all
    cmds:
      - nats bench foo --pub 1 --request --msgs 10000 --server nats://localhost:4223,nats://localhost:4224,nats://localhost:4225

  bench-pub:
    deps:
      - nats:all
    cmds:
      - nats bench --js --purge foo --size 1000 --msgs 1000000 --pub 1 --server nats://localhost:4322,nats://localhost:4323,nats://localhost:4324

  bench-sub:
    deps:
      - nats:all
    cmds:
      - nats bench --js --purge foo --sub 5 --msgs 1000000 --server nats://localhost:4223,nats://localhost:4224,nats://localhost:4225

  # Задача для проверки доступности хоста
  check-host:
    desc: Проверка доступности хоста
    cmds:
      - |
        docker exec {{.HOST_CONTAINER}} sh -c 'wget --no-verbose --tries=1 --spider http://{{.TARGET_HOST}}:8222/healthz > /dev/null 2>&1 && echo "Host {{.TARGET_HOST}} доступен" || echo "Host {{.TARGET_HOST}} недоступен"'
    silent: true

  # Internal задача для обновления /etc/hosts в контейнере
  set-host:
    desc: 'Internal: Обновление /etc/hosts в контейнере'
    cmds:
      - |
        echo '{{`sss`}}'
        # docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' {{.TARGET_CONTAINER}}
        
        IP="$(docker inspect -f '{{`{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}`}}' {{.TARGET_CONTAINER}})"
        
        echo "$IP {{.DNS_NAME}}"
        
        docker exec {{.HOST_CONTAINER}} sh -c "echo \"$IP {{.DNS_NAME}}\" >> /etc/hosts"
    silent: true

  # Привязка nats-leaf-gw к имени nats-leaf-discovered
  set-1:
    desc: Привязка nats-leaf-gw к имени nats-leaf-discovered
    cmds:
      - task: set-host
        vars:
          HOST_CONTAINER: nats-agent-leaf
          TARGET_CONTAINER: nats-leaf-gw
          DNS_NAME: nats-leaf-discovered
      - task: check-host
        vars:
          HOST_CONTAINER: nats-agent-leaf
          TARGET_HOST: nats-leaf-discovered

  # Привязка nats-leaf-gw2 к имени nats-leaf-discovered
  set-2:
    desc: Привязка nats-leaf-gw2 к имени nats-leaf-discovered
    cmds:
      - task: set-host
        vars:
          HOST_CONTAINER: nats-agent-leaf
          TARGET_CONTAINER: nats-leaf-gw2
          DNS_NAME: nats-leaf-discovered
      - task: check-host
        vars:
          HOST_CONTAINER: nats-agent-leaf
          TARGET_HOST: nats-leaf-discovered
